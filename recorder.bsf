import java.io.*;
import org.apache.commons.lang.StringUtils;
import org.apache.jmeter.util.JMeterUtils;      // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/util/JMeterUtils.html
import org.apache.jmeter.threads.JMeterContext; // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/threads/JMeterContext.html
import org.apache.jmeter.samplers.SampleResult; // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/samplers/SampleResult.html

MoodleResult(JMeterContext ctx) {

    // /var/www/moodle-jmeter-perfcomp/moodle.course.basic.bsf

    Integer thread = ctx.getThreadNum();
    SampleResult result = ctx.getPreviousResult();

    // Moodle properties collected from the page by post processors
    String username = vars.get("username");
    String dbreads = vars.get("DBREADS");
    String dbwrites = vars.get("DBWRITES");
    String memoryused = vars.get("MEMORYUSED");
    String filesincluded = vars.get("FILESINCLUDED");
    String serverload = vars.get("SERVERLOAD");
    String sessionsize = vars.get("SESSIONSIZE");
    String timeused = vars.get("TIMEUSED");
    String gitbranch = vars.get("GITBRANCH");
    String getstring = vars.get("GETSTRINGCALLS");
    String stringcache = vars.get("STRINGCACHEHITS");

    // Actual information collected about the sample by jmeter
    String name = StringUtils.rightPad(result.getSampleLabel(), 30);
    String url = result.getUrlAsString();
    Integer bytes = result.getBytes();
    Long time = result.getTime();
    Long latency = result.getLatency();
    Long starttime = result.getStartTime();
    String status = result.getResponseCode();

    headerToString() {
        String str = "status | thread | ";
        str += StringUtils.rightPad("user", 10) + " | ";
        str += StringUtils.rightPad("name", 30) + " | db-w | db-r | ";
        str += StringUtils.rightPad("memory", 8) + " | ";
        str += StringUtils.rightPad("files", 6) + " |";
        return str;
    }

    toString() {
        String str = StringUtils.rightPad(status, 6) + " | ";
        str += StringUtils.rightPad(Integer.toString(thread), 6) + " | ";
        str += StringUtils.rightPad(username, 10) + " | ";
        str += StringUtils.rightPad(name, 30) + " | ";
        str += StringUtils.rightPad(dbreads, 4) + " | ";
        str += StringUtils.rightPad(dbwrites, 4) + " | ";
        str += StringUtils.rightPad(memoryused, 8) + " | ";
        str += StringUtils.rightPad(filesincluded, 6) + " | ";
        return str;
    }

    toPHP() {
       String php = "$results["+thread+"][] = array(\n";
       php += "    'thread'=>"+thread+",\n";        // Int
       php += "    'gitbranch'=>'"+gitbranch+"',\n";        // Int
       php += "    'starttime'=>"+starttime+",\n";      // Long
       php += "    'dbreads'=>"+Integer.parseInt(dbreads)+",\n";    // String => Int
       php += "    'dbwrites'=>"+Integer.parseInt(dbwrites)+",\n";  // String => Int
       php += "    'getstring'=>"+Integer.parseInt(getstring)+",\n";  // String => Int
       php += "    'stringcache'=>"+Integer.parseInt(stringcache)+",\n";  // String => Int
       php += "    'memoryused'=>'"+memoryused+"',\n";
       php += "    'filesincluded'=>'"+filesincluded+"',\n";
       php += "    'serverload'=>'"+serverload+"',\n";
       php += "    'sessionsize'=>'"+sessionsize+"',\n";
       php += "    'timeused'=>'"+timeused+"',\n";
       php += "    'name'=>'"+name+"',\n";
       php += "    'url'=>'"+url+"',\n";
       php += "    'bytes'=>'"+bytes+"',\n";
       php += "    'time'=>'"+time+"',\n";
       php += "    'latency'=>'"+latency+"',\n";
       php += ");\n";
       return php;
    }

    return this;
}

Runnable mr = MoodleResult(ctx);

String filenamepath = JMeterUtils.getProperty("runfile");
if (filenamepath == null) {
    String gitbranch = vars.get("GITBRANCH");
    String filenamepath = "runs/"+gitbranch+"."+vars.get("RUNTIMESTAMP")+".php";
    JMeterUtils.setProperty("runfile", filenamepath);
}

File f = new File(filenamepath);
if (!f.exists()) {
    FileWriter fstream = new FileWriter(filenamepath, true);
    BufferedWriter out = new BufferedWriter(fstream);
    out.write("<?php\n");
    out.write("$host = '"+props.get("host")+"';\n");
    out.write("$rundesc = '"+props.get("desc")+"';\n");
    out.write("$loopcount = '"+props.get("loops")+"';\n");
    out.write("$users = '"+props.get("users")+"';\n");
    out.close();
}

FileWriter fstream = new FileWriter(filenamepath, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(mr.toPHP());
out.close();

if (JMeterUtils.getProperty("headerprinted") == null) {
    JMeterUtils.setProperty("headerprinted", "1");
    print(mr.headerToString());
}

print(mr.toString());
